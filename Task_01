def caesar_cipher(text, shift, mode):
    """
    Encrypt or decrypt text using Caesar cipher algorithm
    
    Parameters:
    text (str): The input message to encrypt/decrypt
    shift (int): The number of positions to shift each character
    mode (str): 'encrypt' or 'decrypt'
    
    Returns:
    str: The transformed message
    """
    result = ""
    
    # Adjust shift for decryption
    if mode == 'decrypt':
        shift = -shift
    
    for char in text:
        # Encrypt/decrypt uppercase letters
        if char.isupper():
            result += chr((ord(char) + shift - 65) % 26 + 65)
        # Encrypt/decrypt lowercase letters
        elif char.islower():
            result += chr((ord(char) + shift - 97) % 26 + 97)
        # Leave other characters unchanged
        else:
            result += char
    
    return result

def main():
    print("Caesar Cipher Encryption/Decryption Tool")
    print("---------------------------------------")
    
    while True:
        # Get user input
        mode = input("Do you want to (e)ncrypt or (d)ecrypt? ").lower()
        if mode not in ['e', 'd']:
            print("Invalid choice. Please enter 'e' or 'd'.")
            continue
            
        message = input("Enter your message: ")
        try:
            shift = int(input("Enter the shift value (1-25): "))
            if shift < 1 or shift > 25:
                raise ValueError
        except ValueError:
            print("Invalid shift value. Please enter a number between 1 and 25.")
            continue
        
        # Process the message
        if mode == 'e':
            result = caesar_cipher(message, shift, 'encrypt')
            print(f"\nEncrypted message: {result}")
        else:
            result = caesar_cipher(message, shift, 'decrypt')
            print(f"\nDecrypted message: {result}")
        
        # Ask to continue
        another = input("\nDo you want to process another message? (y/n): ").lower()
        if another != 'y':
            print("Goodbye!")
            break

if __name__ == "__main__":
    main()
