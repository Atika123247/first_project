import re
import getpass  # For secure password input

class PasswordStrengthAnalyzer:
    def __init__(self, password):
        self.password = password
        self.length = len(password)
        self.strength_score = 0
        self.feedback = []
        
    def analyze(self):
        """Analyze password strength and return results"""
        self._check_length()
        self._check_lowercase()
        self._check_uppercase()
        self._check_numbers()
        self._check_special_chars()
        self._check_common_patterns()
        self._calculate_strength()
        
        return {
            'strength_score': self.strength_score,
            'strength_level': self._get_strength_level(),
            'feedback': self.feedback
        }
    
    def _check_length(self):
        """Evaluate password length"""
        if self.length >= 16:
            self.strength_score += 3
            self.feedback.append("✓ Excellent length (16+ characters)")
        elif self.length >= 12:
            self.strength_score += 2
            self.feedback.append("✓ Good length (12-15 characters)")
        elif self.length >= 8:
            self.strength_score += 1
            self.feedback.append("⚠ Minimum recommended length (8-11 characters)")
        else:
            self.feedback.append("✗ Too short (less than 8 characters)")
    
    def _check_lowercase(self):
        """Check for lowercase letters"""
        if re.search(r'[a-z]', self.password):
            self.strength_score += 1
            self.feedback.append("✓ Contains lowercase letters")
        else:
            self.feedback.append("✗ Missing lowercase letters")
    
    def _check_uppercase(self):
        """Check for uppercase letters"""
        if re.search(r'[A-Z]', self.password):
            self.strength_score += 1
            self.feedback.append("✓ Contains uppercase letters")
        else:
            self.feedback.append("✗ Missing uppercase letters")
    
    def _check_numbers(self):
        """Check for numbers"""
        if re.search(r'[0-9]', self.password):
            self.strength_score += 1
            self.feedback.append("✓ Contains numbers")
        else:
            self.feedback.append("✗ Missing numbers")
    
    def _check_special_chars(self):
        """Check for special characters"""
        if re.search(r'[^a-zA-Z0-9]', self.password):
            self.strength_score += 2
            self.feedback.append("✓ Contains special characters")
        else:
            self.feedback.append("✗ Missing special characters")
    
    def _check_common_patterns(self):
        """Check for common weak patterns"""
        common_patterns = [
            'password', '123456', 'qwerty', 'admin', 'welcome',
            'abcdef', '111111', 'letmein', 'sunshine'
        ]
        
        lower_pass = self.password.lower()
        if any(pattern in lower_pass for pattern in common_patterns):
            self.strength_score -= 2
            self.feedback.append("⚠ Contains common password patterns (weak)")
        
        # Check for sequential characters
        if (re.search(r'(.)\1{2,}', self.password) or  # 3+ repeating chars
            re.search(r'123|234|345|456|567|678|789|890', self.password) or
            re.search(r'abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl', lower_pass)):
            self.strength_score -= 1
            self.feedback.append("⚠ Contains sequential characters (weak)")
    
    def _calculate_strength(self):
        """Calculate final strength score (0-10 scale)"""
        # Normalize to 0-10 range
        self.strength_score = max(0, min(10, self.strength_score))
    
    def _get_strength_level(self):
        """Convert score to strength level"""
        if self.strength_score >= 8:
            return "Very Strong"
        elif self.strength_score >= 6:
            return "Strong"
        elif self.strength_score >= 4:
            return "Moderate"
        elif self.strength_score >= 2:
            return "Weak"
        else:
            return "Very Weak"

def display_results(results):
    """Display the analysis results in a user-friendly format"""
    print("\nPassword Strength Analysis:")
    print(f"Strength Score: {results['strength_score']}/10")
    print(f"Strength Level: {results['strength_level']}")
    
    print("\nDetailed Feedback:")
    for item in results['feedback']:
        print(f"- {item}")
    
    print("\nRecommendations:")
    if results['strength_score'] >= 8:
        print("Your password is excellent! No changes needed.")
    elif results['strength_score'] >= 6:
        print("Good password. Consider adding special characters or increasing length.")
    elif results['strength_score'] >= 4:
        print("Moderate password. Try adding more character types and length.")
    else:
        print("Weak password. Please consider creating a stronger password with:")
        print("- At least 12 characters")
        print("- Mix of uppercase and lowercase letters")
        print("- Numbers and special characters")
        print("- Avoid common words and patterns")

def get_password():
    """Securely get password input with confirmation"""
    while True:
        password = getpass.getpass("Enter password: ")
        confirm = getpass.getpass("Confirm password: ")
        
        if password == confirm:
            return password
        print("Passwords don't match. Please try again.\n")

def main():
    print("Password Strength Analyzer")
    print("-------------------------")
    
    password = get_password()
    analyzer = PasswordStrengthAnalyzer(password)
    results = analyzer.analyze()
    
    display_results(results)

if __name__ == "__main__":
    main()
